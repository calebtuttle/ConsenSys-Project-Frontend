{"ast":null,"code":"var _jsxFileName = \"/home/caleb/Desktop/myprograms/ConsenSysBootcampStuff/blockchain-developer-bootcamp-final-project/client/src/App.js\";\nimport React, { Component } from \"react\";\nimport SimpleStorageContract from \"./contracts/SimpleStorage.json\";\nimport JobBoardContract from \"./contracts/JobBoard.json\";\nimport getWeb3 from \"./getWeb3\";\nimport JobPost from \"./JobPost\";\nimport ApplicantRegistration from \"./ApplicantRegistration\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      jobPostings: [],\n      web3: null,\n      accounts: null,\n      contract: null\n    };\n\n    this.componentDidMount = async () => {\n      // try {\n      //   // Get network provider and web3 instance.\n      //   const web3 = await getWeb3();\n      //   // Use web3 to get the user's accounts.\n      //   const accounts = await web3.eth.getAccounts();\n      //   // Get the contract instance.\n      //   const networkId = await web3.eth.net.getId();\n      //   const deployedNetwork = SimpleStorageContract.networks[networkId];\n      //   const instance = new web3.eth.Contract(\n      //     SimpleStorageContract.abi,\n      //     deployedNetwork && deployedNetwork.address,\n      //   );\n      //   // Set web3, accounts, and contract to the state, and then proceed with an\n      //   // example of interacting with the contract's methods.\n      //   this.setState({ web3, accounts, contract: instance }, this.runExample);\n      // } catch (error) {\n      //   // Catch any errors for any of the above operations.\n      //   alert(\n      //     `Failed to load web3, accounts, or contract. Check console for details.`,\n      //   );\n      //   console.error(error);\n      // }\n      try {\n        // Get network provider and web3 instance.\n        const web3 = await getWeb3(); // Use web3 to get the user's accounts.\n\n        const accounts = await web3.eth.getAccounts(); // Get the contract instance.\n\n        const networkId = await web3.eth.net.getId();\n        const deployedNetwork = JobBoardContract.networks[networkId];\n        const instance = new web3.eth.Contract(JobBoardContract.abi, deployedNetwork && deployedNetwork.address);\n        const jobCount = await instance.methods.jobCount().call();\n        let jobPostings = [];\n\n        for (var jobId = 1; jobId < jobCount; jobId++) {\n          let job = await instance.methods.getJob(jobId).call();\n          job = [jobId, job.poster, job.title, job.description];\n          jobPostings.push(job);\n        } // Set web3, accounts, and contract to the state, and then proceed with an\n        // example of interacting with the contract's methods.\n        //   this.setState({ web3, accounts, contract: instance }, this.runExample);\n\n\n        this.setState({\n          jobPostings,\n          web3,\n          accounts,\n          contract: instance\n        });\n      } catch (error) {\n        alert(\"Failed to load web3, accounts, or contract. Check console for details.\");\n        console.error(error);\n      }\n    };\n\n    this.postJob = async event => {\n      event.preventDefault();\n      const _this$state = this.state,\n            jobPostings = _this$state.jobPostings,\n            accounts = _this$state.accounts,\n            contract = _this$state.contract;\n      let title = event.target.elements.jobTitle.value;\n      let desc = event.target.elements.jobDescription.value;\n      let jobId = await contract.methods.jobCount().call();\n      await contract.methods.postJob(title, desc).send({\n        from: accounts[0]\n      }); // let response = await contract.methods.getJob(jobPostings.length).call();\n      // let posting = [response['poster'], response['title'], response['description']];\n\n      let posting = [jobId, accounts[0], title, desc];\n      let postings = jobPostings;\n      postings.push(posting);\n      this.setState({\n        jobPostings: postings\n      });\n    };\n\n    this.runExample = async () => {\n      const _this$state2 = this.state,\n            jobPostings = _this$state2.jobPostings,\n            accounts = _this$state2.accounts,\n            contract = _this$state2.contract; // Stores a given value, 5 by default.\n      // await contract.methods.set(5).send({ from: accounts[0] });\n      // // Get the value from the contract to prove it worked.\n      // const response = await contract.methods.get().call();\n\n      var title = \"Solidity Developer\";\n      var desc = \"Write solidity, write tests, etc....\";\n      await contract.methods.postJob(title, desc).send({\n        from: accounts[0]\n      });\n      let response = await contract.methods.getJob(1).call();\n      let posting = [response['poster'], response['title'], response['description']];\n      let postings = jobPostings;\n      postings.push(posting); // Update state with the result.\n\n      this.setState({\n        jobPostings: postings\n      });\n    };\n  }\n\n  render() {\n    if (!this.state.web3) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, \"Loading Web3, accounts, and contract...\");\n    }\n\n    let jobPosts = this.state.jobPostings.map(posting => React.createElement(JobPost, {\n      key: posting[0],\n      poster: posting[1],\n      title: posting[2],\n      description: posting[3],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }));\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, \"A Decentralized Job Board\"), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }), React.createElement(ApplicantRegistration, {\n      web3: this.state.web3,\n      accounts: this.state.accounts,\n      contract: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }), React.createElement(\"form\", {\n      onSubmit: this.postJob,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, \"Job title: \", React.createElement(\"input\", {\n      type: \"text\",\n      name: \"jobTitle\",\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, \"Job description: \", React.createElement(\"input\", {\n      type: \"text\",\n      name: \"jobDescription\",\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"submit\",\n      value: \"Post job\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }), React.createElement(JobPost, {\n      key: \"0\",\n      poster: \"0x00000000000000000000000000000000000000000\",\n      title: \"Test Job title\",\n      description: \"Test job description...\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }), jobPosts);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/caleb/Desktop/myprograms/ConsenSysBootcampStuff/blockchain-developer-bootcamp-final-project/client/src/App.js"],"names":["React","Component","SimpleStorageContract","JobBoardContract","getWeb3","JobPost","ApplicantRegistration","App","state","jobPostings","web3","accounts","contract","componentDidMount","eth","getAccounts","networkId","net","getId","deployedNetwork","networks","instance","Contract","abi","address","jobCount","methods","call","jobId","job","getJob","poster","title","description","push","setState","error","alert","console","postJob","event","preventDefault","target","elements","jobTitle","value","desc","jobDescription","send","from","posting","postings","runExample","response","render","jobPosts","map"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport SimpleStorageContract from \"./contracts/SimpleStorage.json\";\nimport JobBoardContract from \"./contracts/JobBoard.json\";\nimport getWeb3 from \"./getWeb3\";\n\nimport JobPost from \"./JobPost\";\nimport ApplicantRegistration from \"./ApplicantRegistration\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = { jobPostings: [], web3: null, accounts: null, contract: null };\n\n  componentDidMount = async () => {\n    // try {\n    //   // Get network provider and web3 instance.\n    //   const web3 = await getWeb3();\n\n    //   // Use web3 to get the user's accounts.\n    //   const accounts = await web3.eth.getAccounts();\n\n    //   // Get the contract instance.\n    //   const networkId = await web3.eth.net.getId();\n    //   const deployedNetwork = SimpleStorageContract.networks[networkId];\n    //   const instance = new web3.eth.Contract(\n    //     SimpleStorageContract.abi,\n    //     deployedNetwork && deployedNetwork.address,\n    //   );\n\n    //   // Set web3, accounts, and contract to the state, and then proceed with an\n    //   // example of interacting with the contract's methods.\n    //   this.setState({ web3, accounts, contract: instance }, this.runExample);\n    // } catch (error) {\n    //   // Catch any errors for any of the above operations.\n    //   alert(\n    //     `Failed to load web3, accounts, or contract. Check console for details.`,\n    //   );\n    //   console.error(error);\n    // }\n\n    \n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = JobBoardContract.networks[networkId];\n      const instance = new web3.eth.Contract(\n        JobBoardContract.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n\n      const jobCount = await instance.methods.jobCount().call();\n      let jobPostings = []\n      for (var jobId = 1; jobId < jobCount; jobId++) {\n        let job = await instance.methods.getJob(jobId).call();\n        job = [jobId, job.poster, job.title, job.description];\n        jobPostings.push(job);\n      }\n\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n    //   this.setState({ web3, accounts, contract: instance }, this.runExample);\n      this.setState({ jobPostings, web3, accounts, contract: instance });\n    } catch (error) {\n        alert(\n          `Failed to load web3, accounts, or contract. Check console for details.`,\n        );\n        console.error(error);\n    }\n  };\n\n  postJob = async (event) => {\n    event.preventDefault();\n    const { jobPostings, accounts, contract } = this.state;\n\n    let title = event.target.elements.jobTitle.value;\n    let desc = event.target.elements.jobDescription.value;\n    let jobId = await contract.methods.jobCount().call();\n    await contract.methods.postJob(title, desc).send({ from: accounts[0] });\n\n    // let response = await contract.methods.getJob(jobPostings.length).call();\n    // let posting = [response['poster'], response['title'], response['description']];\n    let posting = [jobId, accounts[0], title, desc];\n    let postings = jobPostings;\n    postings.push(posting);\n\n    this.setState({ jobPostings: postings });\n  }\n\n  runExample = async () => {\n    const { jobPostings, accounts, contract } = this.state;\n\n    // Stores a given value, 5 by default.\n    // await contract.methods.set(5).send({ from: accounts[0] });\n\n    // // Get the value from the contract to prove it worked.\n    // const response = await contract.methods.get().call();\n\n    var title = \"Solidity Developer\";\n    var desc = \"Write solidity, write tests, etc....\";\n    await contract.methods.postJob(title, desc).send({ from: accounts[0] });\n    let response = await contract.methods.getJob(1).call();\n    let posting = [response['poster'], response['title'], response['description']];\n    let postings = jobPostings;\n    postings.push(posting);\n\n    // Update state with the result.\n    this.setState({ jobPostings: postings });\n  };\n\n  render() {\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n\n    let jobPosts = this.state.jobPostings.map((posting) => \n        <JobPost key={posting[0]} poster={posting[1]} title={posting[2]} description={posting[3]} />\n    );\n\n    return (\n      <div className=\"App\">\n        <h1>A Decentralized Job Board</h1>\n        <hr/>\n        <ApplicantRegistration web3={this.state.web3} accounts={this.state.accounts} contract/>\n        <hr/>\n        <form onSubmit={this.postJob}>\n            <label>\n                Job title: <input type=\"text\" name=\"jobTitle\" required />\n            </label>\n            <br/>\n            <label>\n                Job description: <input type=\"text\" name=\"jobDescription\" required />\n            </label>\n            <br/>\n            <input type=\"submit\" value=\"Post job\" />\n        </form>\n        <br/>\n        <JobPost key=\"0\" poster=\"0x00000000000000000000000000000000000000000\" title=\"Test Job title\" description=\"Test job description...\" />\n        {jobPosts}\n        {/* <div>The stored value is: {this.state.storageValue}</div> */}\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}